generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum UserRole {
    Admin
    Atleta
    Treinador
}

model Account {
    id                String  @id @default(cuid())
    userId            String  @map("user_id")
    type              String
    provider          String
    providerAccountId String  @map("provider_account_id")
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    password      String?
    role          UserRole?
    onboardingCompleted Boolean @default(false)
    birthDate     DateTime?
    bio           String?
    accounts      Account[]
    sessions      Session[]
    // Relacionamentos com tabelas específicas
    coach         Coach?
    athlete       Athlete?
    address       Address?

    @@map("users")
}

model Coach {
  id             String  @id @default(cuid())
  userId         String  @unique @map("user_id")
  experience     String
  hourlyRate     Float
  certifications String  
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  title                   String? 
  rating                  Float?
  careerStartDate         DateTime?
  stateTitles             Int?     @default(0)
  coachedProfessionalAthletes Int? @default(0)

  @@map("coaches")
}


model Athlete {
  id            String  @id @default(cuid())
  userId        String  @unique @map("user_id")
  sport         String
  height        Int     // Altura em centímetros
  weight        Float
  injuryHistory String?
  user          User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  position      String?
  level         String? 
  gamesPlayed   Int?    @default(0) 
  goals         Int?    @default(0)
  
  @@map("athletes")
}


model Address {
    id        String  @id @default(cuid())
    userId    String  @unique @map("user_id")
    street    String
    city      String
    state     String
    zipCode   String
    country   String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("addresses")
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}
